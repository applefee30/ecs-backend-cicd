name: CD - Deploy to Amazon ECS

on:
  push:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      phase:
        type: choice
        description: 'env'
        required: true
        options:
          - test
          - production

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.phase || github.head_ref }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: |
            17

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle Build
        run: ./gradlew clean build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build --platform=linux/arm64 --build-arg PHASE=${{ github.event.inputs.phase }} -t $ECR_REGISTRY/${{ github.event.repository.name }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ github.event.repository.name }}:$IMAGE_TAG
          echo "docker_image=$ECR_REGISTRY/${{ github.event.repository.name }}:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/workflows/${{ github.event.inputs.phase }}-ecs-task-definition.json
          container-name: ${{ github.event.repository.name }}
          image: ${{ env.docker_image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ github.event.repository.name }}
          cluster: ${{ github.event.inputs.phase }}-ecs-cluster
          wait-for-service-stability: false
